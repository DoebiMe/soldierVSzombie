package setups;

import combinatedFields.Position;
import imageFoundation.ImageObject;
import javafx.scene.image.Image;
import javafx.scene.image.PixelReader;
import javafx.scene.image.PixelWriter;
import javafx.scene.image.WritableImage;
import javafx.scene.paint.Color;

import java.util.List;

public class TilesSetup {
    public static final int TILE_MAP_COLS = 64;
    public  static final int TILE_MAP_ROWS = 15;
    public  int[][] tileMapId = new int[TILE_MAP_COLS][TILE_MAP_ROWS];
    public  Image[] slicedTiles;
    public  int tileWidth;
    public  int tileHeight;

    public  int TRANSPORTER_GATE_ID = 175;

    public TilesSetup() {
        tilesSetup();
    }

    public  void tilesSetup() {
        loadAndSliceTileSource("platform1.bmp");
        loadAndBuildTileMapIds();
    }

    private  void loadAndBuildTileMapIds() {
        int[] tileMapSingle = {
              //  20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 175, 20, 21, 22, 23, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 21, 187, 187, 187, 187, 187, 187, 187, 109, 187, 187, 187, 109, 109, 187, 109, 187, 187, 187, 187, 187, 109, 187, 187, 187, 187, 187, 187, 187, 187, 187, 21, 21, 187, 109, 109, 109, 187, 109, 187, 109, 187, 109, 187, 109, 109, 187, 109, 109, 109, 187, 109, 187, 109, 187, 109, 109, 109, 109, 109, 109, 109, 187, 21, 21, 187, 109, 187, 187, 187, 109, 187, 187, 187, 109, 187, 187, 187, 187, 187, 187, 187, 187, 109, 187, 109, 187, 187, 187, 187, 109, 187, 187, 187, 187, 21, 20, 187, 109, 187, 109, 109, 109, 187, 109, 109, 109, 109, 109, 109, 109, 187, 109, 109, 109, 109, 187, 109, 109, 109, 187, 109, 109, 187, 109, 109, 187, 22, 21, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 109, 187, 187, 187, 187, 187, 187, 187, 109, 187, 187, 187, 187, 187, 187, 109, 187, 21, 6, 109, 109, 109, 109, 109, 187, 109, 109, 109, 109, 109, 109, 187, 109, 109, 109, 109, 109, 187, 109, 187, 187, 187, 109, 187, 109, 109, 187, 187, 187, 22, 20, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 109, 187, 109, 181, 181, 181, 109, 187, 109, 109, 109, 109, 109, 187, 109, 187, 187, 109, 109, 21, 175, 187, 109, 109, 109, 109, 109, 109, 109, 109, 109, 187, 109, 187, 109, 181, 175, 181, 109, 187, 109, 187, 187, 187, 109, 187, 109, 187, 109, 109, 186, 175, 21, 187, 187, 187, 187, 187, 187, 109, 187, 187, 187, 187, 187, 187, 109, 181, 181, 181, 187, 187, 109, 187, 109, 187, 187, 187, 187, 187, 187, 109, 186, 22, 6, 109, 109, 109, 109, 109, 187, 109, 187, 109, 187, 109, 109, 109, 109, 187, 109, 187, 109, 109, 109, 187, 109, 109, 109, 109, 109, 109, 186, 186, 186, 6, 21, 187, 187, 187, 187, 187, 187, 109, 187, 109, 187, 109, 187, 187, 187, 187, 109, 187, 187, 109, 187, 187, 109, 186, 186, 186, 186, 186, 186, 109, 186, 22, 21, 187, 109, 109, 109, 109, 109, 109, 187, 109, 187, 109, 187, 109, 187, 109, 109, 109, 187, 109, 109, 187, 109, 186, 109, 109, 109, 109, 109, 109, 186, 21, 6, 187, 187, 187, 187, 187, 187, 187, 187, 109, 187, 187, 187, 109, 187, 187, 187, 109, 187, 187, 187, 187, 109, 186, 186, 186, 186, 186, 186, 186, 186, 22, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 175, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 20, 21, 22, 23};
                20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 175, 20, 21, 22, 23, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 175, 20, 21, 22, 23, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 21, 187, 187, 187, 187, 187, 187, 187, 109, 187, 187, 187, 109, 109, 187, 109, 187, 187, 187, 187, 187, 109, 187, 187, 187, 187, 187, 187, 187, 187, 187, 21, 104, 187, 187, 187, 104, 104, 104, 187, 186, 186, 187, 187, 104, 186, 104, 104, 187, 186, 187, 187, 104, 186, 187, 187, 187, 104, 187, 104, 187, 187, 187, 21, 21, 187, 109, 109, 109, 187, 109, 187, 109, 187, 109, 187, 109, 109, 187, 109, 109, 109, 187, 109, 187, 109, 187, 109, 109, 109, 109, 109, 109, 109, 187, 21, 104, 187, 104, 186, 104, 186, 104, 187, 104, 104, 104, 187, 186, 186, 186, 104, 186, 104, 104, 104, 104, 104, 186, 104, 104, 104, 186, 186, 186, 104, 187, 21, 21, 187, 109, 187, 187, 187, 109, 187, 187, 187, 109, 187, 187, 187, 187, 187, 187, 187, 187, 109, 187, 109, 187, 187, 187, 187, 109, 187, 187, 187, 187, 21, 104, 187, 104, 187, 104, 187, 186, 186, 186, 186, 104, 104, 104, 104, 187, 104, 187, 104, 104, 186, 187, 186, 187, 187, 187, 104, 186, 104, 186, 186, 187, 21, 20, 187, 109, 187, 109, 109, 109, 187, 109, 109, 109, 109, 109, 109, 109, 187, 109, 109, 109, 109, 187, 109, 109, 109, 187, 109, 109, 187, 109, 109, 187, 22, 104, 187, 104, 186, 104, 186, 104, 186, 104, 186, 186, 186, 104, 186, 186, 104, 186, 186, 186, 186, 104, 186, 104, 104, 187, 104, 186, 104, 104, 104, 104, 22, 21, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 109, 187, 187, 187, 187, 187, 187, 187, 109, 187, 187, 187, 187, 187, 187, 109, 187, 21, 104, 187, 104, 187, 104, 104, 104, 186, 104, 104, 104, 187, 187, 187, 104, 104, 104, 104, 104, 186, 104, 187, 104, 186, 186, 104, 186, 187, 187, 186, 187, 21, 6, 109, 109, 109, 109, 109, 187, 109, 109, 109, 109, 109, 109, 187, 109, 109, 109, 109, 109, 187, 109, 187, 187, 187, 109, 187, 109, 109, 187, 187, 187, 22, 104, 186, 104, 186, 186, 186, 186, 186, 186, 104, 186, 186, 104, 186, 186, 186, 186, 104, 104, 187, 104, 187, 104, 187, 104, 104, 104, 104, 187, 104, 187, 22, 20, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 109, 187, 109, 181, 181, 181, 109, 187, 109, 109, 109, 109, 109, 187, 109, 187, 187, 109, 109, 21, 104, 187, 104, 104, 104, 104, 187, 104, 187, 104, 186, 104, 104, 186, 186, 104, 186, 186, 104, 187, 186, 186, 186, 186, 186, 187, 186, 186, 186, 104, 186, 21, 175, 187, 109, 109, 109, 109, 109, 109, 109, 109, 109, 187, 109, 187, 109, 181, 175, 181, 109, 187, 109, 187, 187, 187, 109, 187, 109, 187, 109, 109, 186, 186, 186, 187, 186, 175, 186, 186, 186, 104, 186, 186, 186, 104, 186, 186, 104, 104, 186, 104, 104, 104, 104, 104, 104, 187, 104, 104, 104, 104, 104, 104, 186, 175, 21, 187, 187, 187, 187, 187, 187, 109, 187, 187, 187, 187, 187, 187, 109, 181, 181, 181, 187, 187, 109, 187, 109, 187, 187, 187, 187, 187, 187, 109, 186, 22, 104, 186, 104, 104, 104, 187, 104, 104, 104, 104, 187, 104, 186, 186, 186, 104, 186, 186, 187, 104, 104, 104, 104, 186, 186, 186, 186, 187, 186, 104, 104, 22, 6, 109, 109, 109, 109, 109, 187, 109, 187, 109, 187, 109, 109, 109, 109, 187, 109, 187, 109, 109, 109, 187, 109, 109, 109, 109, 109, 109, 186, 186, 186, 6, 104, 186, 104, 186, 186, 186, 187, 104, 187, 186, 187, 104, 104, 104, 186, 104, 186, 104, 186, 186, 186, 187, 104, 186, 104, 104, 104, 104, 186, 186, 186, 6, 21, 187, 187, 187, 187, 187, 187, 109, 187, 109, 187, 109, 187, 187, 187, 187, 109, 187, 187, 109, 187, 187, 109, 186, 186, 186, 186, 186, 186, 109, 186, 22, 104, 187, 104, 186, 104, 104, 104, 104, 186, 104, 104, 104, 186, 186, 187, 104, 186, 186, 187, 104, 187, 187, 104, 186, 104, 186, 186, 186, 186, 104, 104, 22, 21, 187, 109, 109, 109, 109, 109, 109, 187, 109, 187, 109, 187, 109, 187, 109, 109, 109, 187, 109, 109, 187, 109, 186, 109, 109, 109, 109, 109, 109, 186, 21, 104, 187, 104, 186, 104, 186, 186, 104, 187, 186, 186, 104, 186, 104, 104, 104, 104, 104, 186, 104, 186, 104, 104, 186, 104, 186, 104, 104, 186, 186, 104, 21, 6, 187, 187, 187, 187, 187, 187, 187, 187, 109, 187, 187, 187, 109, 187, 187, 187, 109, 187, 187, 187, 187, 109, 186, 186, 186, 186, 186, 186, 186, 186, 22, 104, 187, 187, 187, 104, 104, 187, 187, 187, 104, 186, 187, 187, 186, 104, 187, 187, 186, 186, 104, 187, 187, 104, 186, 186, 186, 186, 104, 104, 104, 104, 22, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 175, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 175, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 20, 21, 22, 23};
        //175 = transporter gate
        //System.out.println("Size = " + tileMapSingle.length);
        int indexer = 0;
        for (int row = 0; row < TILE_MAP_ROWS; row++) {
            for (int col = 0; col < TILE_MAP_COLS; col++) {
                tileMapId[col][row] = tileMapSingle[indexer];
                indexer++;
            }
        }
    }

    public    Position findFreePositionToStart(List<Integer> freeStandingIDList) {
        for (int row=0;row < TILE_MAP_ROWS; row++) {
            for (int col=0;col < TILE_MAP_COLS;col++) {
                if (tileMapId[col][row]!=TRANSPORTER_GATE_ID) {
                    if (freeStandingIDList.contains(tileMapId[col][row])) {
                        // System.out.println("Col = " + col + " Row = " + row);
                        return new Position(col, row);
                    }
                }
            }
        }
        return null;
    }

    private int[] getColTileIdsFromRow(int row) {
        int[] tileIds = new int[TILE_MAP_COLS];
        for (int col=0;col<TILE_MAP_COLS;col++) {
            tileIds[col] = tileMapId[col][row];
        }
        return tileIds;
    }

    private int[] getRowTileIdsFromCol(int col) {
        int[] tileIds = new int[TILE_MAP_ROWS];
        for (int row=0;row<TILE_MAP_COLS;row++) {
            tileIds[col] = tileMapId[col][row];
        }
        return tileIds;
    }

    private  void loadAndSliceTileSource(String tileSourceName) {
        int tileSourceCols = 18;
        int tileSourceRows = 11;
        tileWidth = 16;
        tileHeight = 16;
        slicedTiles = new Image[tileSourceCols * tileSourceRows];
        ImageObject imageObject = new ImageObject(0, tileSourceName);
        if (imageObject.isLoadSuccess()) {
            Image sourceImage = imageObject.getImage();
            PixelReader pixelReader = sourceImage.getPixelReader();
            PixelWriter pixelWriter = null;
            for (int row = 0; row < tileSourceRows; row++) {
                for (int col = 0; col < tileSourceCols; col++) {
                    WritableImage writableImage = new WritableImage(tileWidth, tileHeight);
                    pixelWriter = writableImage.getPixelWriter();

                    for (int readY = 0; readY < tileWidth; readY++) {
                        for (int readX = 0; readX < tileHeight; readX++) {
                            Color color = pixelReader.getColor(readX + (col * (tileWidth + 1)), readY + (row * (tileHeight + 1)));
                            pixelWriter.setColor(readX, readY, color);
                        }
                    }
                    // the image is here, transfer writeable image to image
                    slicedTiles[col + row * tileSourceCols] = writableImage;
                }

            }
        }
    }



}
